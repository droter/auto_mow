;; Auto-generated. Do not edit!


(when (boundp 'pt_actions::NavigateAction)
  (if (not (find-package "PT_ACTIONS"))
    (make-package "PT_ACTIONS"))
  (shadow 'NavigateAction (find-package "PT_ACTIONS")))
(unless (find-package "PT_ACTIONS::NAVIGATEACTION")
  (make-package "PT_ACTIONS::NAVIGATEACTION"))

(in-package "ROS")
;;//! \htmlinclude NavigateAction.msg.html


(defclass pt_actions::NavigateAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod pt_actions::NavigateAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance pt_actions::NavigateActionGoal :init))
    ((:action_result __action_result) (instance pt_actions::NavigateActionResult :init))
    ((:action_feedback __action_feedback) (instance pt_actions::NavigateActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; pt_actions/NavigateActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; pt_actions/NavigateActionResult _action_result
    (send _action_result :serialization-length)
    ;; pt_actions/NavigateActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; pt_actions/NavigateActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; pt_actions/NavigateActionResult _action_result
       (send _action_result :serialize s)
     ;; pt_actions/NavigateActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; pt_actions/NavigateActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; pt_actions/NavigateActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; pt_actions/NavigateActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get pt_actions::NavigateAction :md5sum-) "6b214cf313cfaa350f3c95ed08187ee0")
(setf (get pt_actions::NavigateAction :datatype-) "pt_actions/NavigateAction")
(setf (get pt_actions::NavigateAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

NavigateActionGoal action_goal
NavigateActionResult action_result
NavigateActionFeedback action_feedback

================================================================================
MSG: pt_actions/NavigateActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
NavigateGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: pt_actions/NavigateGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the Goal
#The latitudes and longitudes of the points to travel to.
#Starting location is at index 0, First point
#to travel to is at index 1 
float64[] lats
float64[] lons 
#The number of loops to do around the points
uint8 loops 

#The square size for auto generating points
float64 auto_size

#The lookahead distance for the
#Pure Pursuit Controller. higher values
#cause the rover to converge to path more
#slowly
float64 lookahead_distance
float64 max_angular_speed
float64 threshold
#The desired speed to drive along
#the path
float64 desired_speed

#The start point index in the path
uint8 start_point

================================================================================
MSG: pt_actions/NavigateActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
NavigateResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: pt_actions/NavigateResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
#The ending latitude and longitude on completion
float64 end_lat
float64 end_lon
#The average(in metres) of how close the rover made it to the points
float64 end_distance


================================================================================
MSG: pt_actions/NavigateActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
NavigateFeedback feedback

================================================================================
MSG: pt_actions/NavigateFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message
#The current position of the rover
float64 latitude
float64 longitude

#The total distance travelled
float64 distanceTravelled

#The current point on the path we are tracking from
uint8 curPoint

#The current status of the tracker. If 0, tracker is waiting for RTK lock
#If 1, tracker has an RTK lock and is actively tracking path
uint8 status


")



(provide :pt_actions/NavigateAction "6b214cf313cfaa350f3c95ed08187ee0")


