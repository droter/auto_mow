;; Auto-generated. Do not edit!


(when (boundp 'pt_actions::NavigateFeedback)
  (if (not (find-package "PT_ACTIONS"))
    (make-package "PT_ACTIONS"))
  (shadow 'NavigateFeedback (find-package "PT_ACTIONS")))
(unless (find-package "PT_ACTIONS::NAVIGATEFEEDBACK")
  (make-package "PT_ACTIONS::NAVIGATEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude NavigateFeedback.msg.html


(defclass pt_actions::NavigateFeedback
  :super ros::object
  :slots (_latitude _longitude _distanceTravelled _curPoint _status ))

(defmethod pt_actions::NavigateFeedback
  (:init
   (&key
    ((:latitude __latitude) 0.0)
    ((:longitude __longitude) 0.0)
    ((:distanceTravelled __distanceTravelled) 0.0)
    ((:curPoint __curPoint) 0)
    ((:status __status) 0)
    )
   (send-super :init)
   (setq _latitude (float __latitude))
   (setq _longitude (float __longitude))
   (setq _distanceTravelled (float __distanceTravelled))
   (setq _curPoint (round __curPoint))
   (setq _status (round __status))
   self)
  (:latitude
   (&optional __latitude)
   (if __latitude (setq _latitude __latitude)) _latitude)
  (:longitude
   (&optional __longitude)
   (if __longitude (setq _longitude __longitude)) _longitude)
  (:distanceTravelled
   (&optional __distanceTravelled)
   (if __distanceTravelled (setq _distanceTravelled __distanceTravelled)) _distanceTravelled)
  (:curPoint
   (&optional __curPoint)
   (if __curPoint (setq _curPoint __curPoint)) _curPoint)
  (:status
   (&optional __status)
   (if __status (setq _status __status)) _status)
  (:serialization-length
   ()
   (+
    ;; float64 _latitude
    8
    ;; float64 _longitude
    8
    ;; float64 _distanceTravelled
    8
    ;; uint8 _curPoint
    1
    ;; uint8 _status
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _latitude
       (sys::poke _latitude (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _longitude
       (sys::poke _longitude (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _distanceTravelled
       (sys::poke _distanceTravelled (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; uint8 _curPoint
       (write-byte _curPoint s)
     ;; uint8 _status
       (write-byte _status s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _latitude
     (setq _latitude (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _longitude
     (setq _longitude (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _distanceTravelled
     (setq _distanceTravelled (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; uint8 _curPoint
     (setq _curPoint (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _status
     (setq _status (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get pt_actions::NavigateFeedback :md5sum-) "472ed5bc364b6797971771f5605285cb")
(setf (get pt_actions::NavigateFeedback :datatype-) "pt_actions/NavigateFeedback")
(setf (get pt_actions::NavigateFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message
#The current position of the rover
float64 latitude
float64 longitude

#The total distance travelled
float64 distanceTravelled

#The current point on the path we are tracking from
uint8 curPoint

#The current status of the tracker. If 0, tracker is waiting for RTK lock
#If 1, tracker has an RTK lock and is actively tracking path
uint8 status


")



(provide :pt_actions/NavigateFeedback "472ed5bc364b6797971771f5605285cb")


