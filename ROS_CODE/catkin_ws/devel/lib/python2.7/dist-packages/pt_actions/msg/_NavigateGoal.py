# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pt_actions/NavigateGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavigateGoal(genpy.Message):
  _md5sum = "a6de8548f9f5a7b985ca39ba834dfdb4"
  _type = "pt_actions/NavigateGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the Goal
#The latitudes and longitudes of the points to travel to.
#Starting location is at index 0, First point
#to travel to is at index 1 
float64[] lats
float64[] lons 
#The number of loops to do around the points
uint8 loops 

#The square size for auto generating points
float64 auto_size

#The lookahead distance for the
#Pure Pursuit Controller. higher values
#cause the rover to converge to path more
#slowly
float64 lookahead_distance
float64 max_angular_speed
float64 threshold
#The desired speed to drive along
#the path
float64 desired_speed

#The start point index in the path
uint8 start_point
"""
  __slots__ = ['lats','lons','loops','auto_size','lookahead_distance','max_angular_speed','threshold','desired_speed','start_point']
  _slot_types = ['float64[]','float64[]','uint8','float64','float64','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lats,lons,loops,auto_size,lookahead_distance,max_angular_speed,threshold,desired_speed,start_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavigateGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lats is None:
        self.lats = []
      if self.lons is None:
        self.lons = []
      if self.loops is None:
        self.loops = 0
      if self.auto_size is None:
        self.auto_size = 0.
      if self.lookahead_distance is None:
        self.lookahead_distance = 0.
      if self.max_angular_speed is None:
        self.max_angular_speed = 0.
      if self.threshold is None:
        self.threshold = 0.
      if self.desired_speed is None:
        self.desired_speed = 0.
      if self.start_point is None:
        self.start_point = 0
    else:
      self.lats = []
      self.lons = []
      self.loops = 0
      self.auto_size = 0.
      self.lookahead_distance = 0.
      self.max_angular_speed = 0.
      self.threshold = 0.
      self.desired_speed = 0.
      self.start_point = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.lats))
      length = len(self.lons)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.lons))
      _x = self
      buff.write(_get_struct_B5dB().pack(_x.loops, _x.auto_size, _x.lookahead_distance, _x.max_angular_speed, _x.threshold, _x.desired_speed, _x.start_point))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lats = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lons = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 42
      (_x.loops, _x.auto_size, _x.lookahead_distance, _x.max_angular_speed, _x.threshold, _x.desired_speed, _x.start_point,) = _get_struct_B5dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lats.tostring())
      length = len(self.lons)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lons.tostring())
      _x = self
      buff.write(_get_struct_B5dB().pack(_x.loops, _x.auto_size, _x.lookahead_distance, _x.max_angular_speed, _x.threshold, _x.desired_speed, _x.start_point))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lats = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lons = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 42
      (_x.loops, _x.auto_size, _x.lookahead_distance, _x.max_angular_speed, _x.threshold, _x.desired_speed, _x.start_point,) = _get_struct_B5dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B5dB = None
def _get_struct_B5dB():
    global _struct_B5dB
    if _struct_B5dB is None:
        _struct_B5dB = struct.Struct("<B5dB")
    return _struct_B5dB
