// Generated by gencpp from file pt_actions/NavigateResult.msg
// DO NOT EDIT!


#ifndef PT_ACTIONS_MESSAGE_NAVIGATERESULT_H
#define PT_ACTIONS_MESSAGE_NAVIGATERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pt_actions
{
template <class ContainerAllocator>
struct NavigateResult_
{
  typedef NavigateResult_<ContainerAllocator> Type;

  NavigateResult_()
    : end_lat(0.0)
    , end_lon(0.0)
    , end_distance(0.0)  {
    }
  NavigateResult_(const ContainerAllocator& _alloc)
    : end_lat(0.0)
    , end_lon(0.0)
    , end_distance(0.0)  {
  (void)_alloc;
    }



   typedef double _end_lat_type;
  _end_lat_type end_lat;

   typedef double _end_lon_type;
  _end_lon_type end_lon;

   typedef double _end_distance_type;
  _end_distance_type end_distance;





  typedef boost::shared_ptr< ::pt_actions::NavigateResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pt_actions::NavigateResult_<ContainerAllocator> const> ConstPtr;

}; // struct NavigateResult_

typedef ::pt_actions::NavigateResult_<std::allocator<void> > NavigateResult;

typedef boost::shared_ptr< ::pt_actions::NavigateResult > NavigateResultPtr;
typedef boost::shared_ptr< ::pt_actions::NavigateResult const> NavigateResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pt_actions::NavigateResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pt_actions::NavigateResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pt_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'pt_actions': ['/home/ubuntu/catkin_ws/devel/share/pt_actions/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pt_actions::NavigateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pt_actions::NavigateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pt_actions::NavigateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pt_actions::NavigateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pt_actions::NavigateResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pt_actions::NavigateResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pt_actions::NavigateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "271f7b861f12fb0f15fc6ac5f378f270";
  }

  static const char* value(const ::pt_actions::NavigateResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x271f7b861f12fb0fULL;
  static const uint64_t static_value2 = 0x15fc6ac5f378f270ULL;
};

template<class ContainerAllocator>
struct DataType< ::pt_actions::NavigateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pt_actions/NavigateResult";
  }

  static const char* value(const ::pt_actions::NavigateResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pt_actions::NavigateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result\n\
#The ending latitude and longitude on completion\n\
float64 end_lat\n\
float64 end_lon\n\
#The average(in metres) of how close the rover made it to the points\n\
float64 end_distance\n\
\n\
";
  }

  static const char* value(const ::pt_actions::NavigateResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pt_actions::NavigateResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.end_lat);
      stream.next(m.end_lon);
      stream.next(m.end_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigateResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pt_actions::NavigateResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pt_actions::NavigateResult_<ContainerAllocator>& v)
  {
    s << indent << "end_lat: ";
    Printer<double>::stream(s, indent + "  ", v.end_lat);
    s << indent << "end_lon: ";
    Printer<double>::stream(s, indent + "  ", v.end_lon);
    s << indent << "end_distance: ";
    Printer<double>::stream(s, indent + "  ", v.end_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PT_ACTIONS_MESSAGE_NAVIGATERESULT_H
