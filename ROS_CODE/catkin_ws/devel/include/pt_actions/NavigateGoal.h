// Generated by gencpp from file pt_actions/NavigateGoal.msg
// DO NOT EDIT!


#ifndef PT_ACTIONS_MESSAGE_NAVIGATEGOAL_H
#define PT_ACTIONS_MESSAGE_NAVIGATEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pt_actions
{
template <class ContainerAllocator>
struct NavigateGoal_
{
  typedef NavigateGoal_<ContainerAllocator> Type;

  NavigateGoal_()
    : lats()
    , lons()
    , loops(0)
    , auto_size(0.0)
    , lookahead_distance(0.0)
    , max_angular_speed(0.0)
    , threshold(0.0)
    , desired_speed(0.0)
    , start_point(0)  {
    }
  NavigateGoal_(const ContainerAllocator& _alloc)
    : lats(_alloc)
    , lons(_alloc)
    , loops(0)
    , auto_size(0.0)
    , lookahead_distance(0.0)
    , max_angular_speed(0.0)
    , threshold(0.0)
    , desired_speed(0.0)
    , start_point(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lats_type;
  _lats_type lats;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lons_type;
  _lons_type lons;

   typedef uint8_t _loops_type;
  _loops_type loops;

   typedef double _auto_size_type;
  _auto_size_type auto_size;

   typedef double _lookahead_distance_type;
  _lookahead_distance_type lookahead_distance;

   typedef double _max_angular_speed_type;
  _max_angular_speed_type max_angular_speed;

   typedef double _threshold_type;
  _threshold_type threshold;

   typedef double _desired_speed_type;
  _desired_speed_type desired_speed;

   typedef uint8_t _start_point_type;
  _start_point_type start_point;





  typedef boost::shared_ptr< ::pt_actions::NavigateGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pt_actions::NavigateGoal_<ContainerAllocator> const> ConstPtr;

}; // struct NavigateGoal_

typedef ::pt_actions::NavigateGoal_<std::allocator<void> > NavigateGoal;

typedef boost::shared_ptr< ::pt_actions::NavigateGoal > NavigateGoalPtr;
typedef boost::shared_ptr< ::pt_actions::NavigateGoal const> NavigateGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pt_actions::NavigateGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pt_actions::NavigateGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pt_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'pt_actions': ['/home/ubuntu/catkin_ws/devel/share/pt_actions/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pt_actions::NavigateGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pt_actions::NavigateGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pt_actions::NavigateGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pt_actions::NavigateGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pt_actions::NavigateGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pt_actions::NavigateGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pt_actions::NavigateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6de8548f9f5a7b985ca39ba834dfdb4";
  }

  static const char* value(const ::pt_actions::NavigateGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6de8548f9f5a7b9ULL;
  static const uint64_t static_value2 = 0x85ca39ba834dfdb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pt_actions::NavigateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pt_actions/NavigateGoal";
  }

  static const char* value(const ::pt_actions::NavigateGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pt_actions::NavigateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the Goal\n\
#The latitudes and longitudes of the points to travel to.\n\
#Starting location is at index 0, First point\n\
#to travel to is at index 1 \n\
float64[] lats\n\
float64[] lons \n\
#The number of loops to do around the points\n\
uint8 loops \n\
\n\
#The square size for auto generating points\n\
float64 auto_size\n\
\n\
#The lookahead distance for the\n\
#Pure Pursuit Controller. higher values\n\
#cause the rover to converge to path more\n\
#slowly\n\
float64 lookahead_distance\n\
float64 max_angular_speed\n\
float64 threshold\n\
#The desired speed to drive along\n\
#the path\n\
float64 desired_speed\n\
\n\
#The start point index in the path\n\
uint8 start_point\n\
";
  }

  static const char* value(const ::pt_actions::NavigateGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pt_actions::NavigateGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lats);
      stream.next(m.lons);
      stream.next(m.loops);
      stream.next(m.auto_size);
      stream.next(m.lookahead_distance);
      stream.next(m.max_angular_speed);
      stream.next(m.threshold);
      stream.next(m.desired_speed);
      stream.next(m.start_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigateGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pt_actions::NavigateGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pt_actions::NavigateGoal_<ContainerAllocator>& v)
  {
    s << indent << "lats[]" << std::endl;
    for (size_t i = 0; i < v.lats.size(); ++i)
    {
      s << indent << "  lats[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lats[i]);
    }
    s << indent << "lons[]" << std::endl;
    for (size_t i = 0; i < v.lons.size(); ++i)
    {
      s << indent << "  lons[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lons[i]);
    }
    s << indent << "loops: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loops);
    s << indent << "auto_size: ";
    Printer<double>::stream(s, indent + "  ", v.auto_size);
    s << indent << "lookahead_distance: ";
    Printer<double>::stream(s, indent + "  ", v.lookahead_distance);
    s << indent << "max_angular_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_angular_speed);
    s << indent << "threshold: ";
    Printer<double>::stream(s, indent + "  ", v.threshold);
    s << indent << "desired_speed: ";
    Printer<double>::stream(s, indent + "  ", v.desired_speed);
    s << indent << "start_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PT_ACTIONS_MESSAGE_NAVIGATEGOAL_H
