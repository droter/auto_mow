// Generated by gencpp from file pt_actions/NavigateFeedback.msg
// DO NOT EDIT!


#ifndef PT_ACTIONS_MESSAGE_NAVIGATEFEEDBACK_H
#define PT_ACTIONS_MESSAGE_NAVIGATEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pt_actions
{
template <class ContainerAllocator>
struct NavigateFeedback_
{
  typedef NavigateFeedback_<ContainerAllocator> Type;

  NavigateFeedback_()
    : latitude(0.0)
    , longitude(0.0)
    , distanceTravelled(0.0)
    , curPoint(0)
    , status(0)  {
    }
  NavigateFeedback_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , distanceTravelled(0.0)
    , curPoint(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _distanceTravelled_type;
  _distanceTravelled_type distanceTravelled;

   typedef uint8_t _curPoint_type;
  _curPoint_type curPoint;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::pt_actions::NavigateFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pt_actions::NavigateFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct NavigateFeedback_

typedef ::pt_actions::NavigateFeedback_<std::allocator<void> > NavigateFeedback;

typedef boost::shared_ptr< ::pt_actions::NavigateFeedback > NavigateFeedbackPtr;
typedef boost::shared_ptr< ::pt_actions::NavigateFeedback const> NavigateFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pt_actions::NavigateFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pt_actions::NavigateFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pt_actions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'pt_actions': ['/home/ubuntu/catkin_ws/devel/share/pt_actions/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pt_actions::NavigateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pt_actions::NavigateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pt_actions::NavigateFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "472ed5bc364b6797971771f5605285cb";
  }

  static const char* value(const ::pt_actions::NavigateFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x472ed5bc364b6797ULL;
  static const uint64_t static_value2 = 0x971771f5605285cbULL;
};

template<class ContainerAllocator>
struct DataType< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pt_actions/NavigateFeedback";
  }

  static const char* value(const ::pt_actions::NavigateFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define a feedback message\n\
#The current position of the rover\n\
float64 latitude\n\
float64 longitude\n\
\n\
#The total distance travelled\n\
float64 distanceTravelled\n\
\n\
#The current point on the path we are tracking from\n\
uint8 curPoint\n\
\n\
#The current status of the tracker. If 0, tracker is waiting for RTK lock\n\
#If 1, tracker has an RTK lock and is actively tracking path\n\
uint8 status\n\
\n\
";
  }

  static const char* value(const ::pt_actions::NavigateFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.distanceTravelled);
      stream.next(m.curPoint);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigateFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pt_actions::NavigateFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pt_actions::NavigateFeedback_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "distanceTravelled: ";
    Printer<double>::stream(s, indent + "  ", v.distanceTravelled);
    s << indent << "curPoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.curPoint);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PT_ACTIONS_MESSAGE_NAVIGATEFEEDBACK_H
